version: '3.8'

# хранилища
volumes:
    pgdata:
        driver: local
services:
    nginx:
# при падении будет стараться подняться
        restart: always
# только свежий nginx
        image: nginx:latest
# слушает порт 8080
        expose:
          - 8080
# мапаем порт 80 на его 8080. Тогда сайт будет доступен по адресу localhost. Убедись, что порт у тебя не занят.
        ports:
          - "80:8080"
# монтируем только те директории, в которых лежит статика, т.к. nginx с динамикой не будет работать. Также директорию с логами и файл настройки, который мы подготовили.
        volumes:
            - ./static:/usr/src/cybcrm/static
            - ./media:/usr/src/cybcrm/media
            - ./logs:/usr/src/cybcrm/logs
            - ./docker/nginx:/etc/nginx/conf.d
# и nginx зависит от контейнера python. Т.е. python должен быть запущен первым
        depends_on:
            - python
    python:
        restart: always
# указываем откуда собирать образ
        build:
          context: .
          dockerfile: .Dockerfile
# монтируем директорию проекта
        volumes:
          - .:/usr/src/cybcrm
        expose:
          - 8000
        ports:
          - 8000:8000
        # environment:
        #   - DB_PORT=5432  # Добавьте эту строку
        #   - DJANGO_DEBUG=False
        env_file:
          - .env
        depends_on:
          - postgres
          
# запускаем gunicorn
        command: "gunicorn -c gunicorn.py cybcrm.wsgi"
        # command: "gunicorn -k uvicorn.workers.UvicornWorker -c gunicorn.py cybcrm.wsgi"
    postgres:
# Ниже даже расписывать не хочу, насколько все просто: логин, пароль, БД, порты и т.д.
        image: postgres:15-alpine
        container_name: cyb_postgres
        # ports:
        #     - 5432:5432
        # environment:
        #     POSTGRES_USER: myprojectuser
        #     POSTGRES_PASSWORD: zpxocivu
        #     POSTGRES_DB: myproject
        #     PGDATA: /var/lib/postgresql/data
        env_file:
          - .env  
        volumes:
            - pgdata:/var/lib/postgresql/data